generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       String    @id @default(uuid())
  name     String
  slug     String
  imageUrl String
  products Product[]
}

model Product {
  id                 String     @id @default(uuid())
  name               String
  slug               String
  description        String
  imageUrls          String[]
  basePrice          Decimal    @db.Decimal(8, 2)
  categoryId         String
  discountPercentage Int        @default(0)
  category           Category   @relation(fields: [categoryId], references: [id])
  OrderItem          OrderItem? @relation(fields: [orderItemId], references: [id])
  orderItemId        String?
}

model OrderStatus {
  id                 String @id
  PENDING            String
  PAYMENT_SUCCESSFUL String
  PAYMENT_REJECT     String
  ORDER              Order? @relation(fields: [id], references: [id])
}

model OrderItem {
  id      String    @id @default(uuid())
  userId  String
  user    User      @relation(fields: [userId], references: [id])
  Order   Order?    @relation(fields: [orderId], references: [id])
  orderId String
  total   Decimal   @db.Decimal(8, 2)
  product Product[]
}

model Order {
  id            String        @id
  userId        String        @map("user_id")
  orderStatus   OrderStatus[]
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paymentMethod String[]
  delivery      String
  total         Decimal       @db.Decimal(8, 2)
  userAccount   Account[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String?
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  OrderItem     OrderItem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
